---
title: "Day 4 of MedBioInfo"
date: 2025-10-09
categories: [medbioinfo, learning, data-science, nf-core]
author: "August Lundholm"
description: "Day 4 - Advanced nf-core pipelines and RNAseq analysis"
draft: false
---

# Day 4 of MedBioInfo

Day 4 brought us deeper into the nf-core ecosystem! Today we moved from basic Nextflow to advanced pipeline usage with real biological data.

## Today's Focus

Today we worked with:
- nf-core pipeline introduction and evaluation
- Testing pipelines with built-in test data  
- Running the nf-core/rnaseq pipeline on real data
- Understanding pipeline configuration and job submission

## Morning Session - nf-core Introduction

### What makes nf-core special?

The nf-core community provides:
- **Standardized pipelines** for many bioinformatics workflows
- **Extensive documentation** following consistent guidelines
- **Automatic input validation** through the nf-core launcher
- **Consistent structure** across all pipelines
- **Open source development** by volunteer community

### Finding and Evaluating Pipelines

We explored the [nf-core homepage](https://nf-co.re/) and learned to evaluate pipelines by checking:
- **Usage documentation** - understanding input requirements
- **Parameters** - available customization options  
- **Output** - expected results and file formats
- **Pipeline suitability** for our specific data types

## Afternoon Session - Hands-on Pipeline Testing

### Setting Up the Environment

First, we created a dedicated pixi environment for nf-core work:

```bash
pixi init nextflow_test -c conda-forge -c bioconda
cd nextflow_test
pixi add nextflow nf-core
```

### Testing the Setup

We verified our installation worked correctly:

```bash
pixi run nextflow -version
pixi run nf-core --help
pixi run nextflow run hello
```

Expected output:
```
N E X T F L O W
version 25.04.7 build 5955
created 08-09-2025 13:29 UTC (15:29 CEST)
cite doi:10.1038/nbt.3820
http://nextflow.io
```

### Configuration Profile Setup

We downloaded the HPC2N configuration file for server-specific settings:

```bash
wget https://raw.githubusercontent.com/hpc2n/intro-course/master/exercises/NEXTFLOW/INTERACTIVE/hpc2n.config
```

Key configuration parameters:
- `max_memory = 128.GB`
- `max_cpus = 28` 
- `max_time = 168.h`
- `executor = 'slurm'`

### Running Test Pipeline

We tested the Sarek variant calling pipeline with built-in test data:

```bash
pixi run nextflow run nf-core/sarek -profile test --outdir sarek_test -c hpc2n.config
```

Command breakdown:
- `pixi run` - Use our pixi environment
- `nextflow run` - Execute with Nextflow
- `nf-core/sarek` - Pipeline name/location
- `-profile test` - Use built-in test data
- `--outdir sarek_test` - Output directory
- `-c hpc2n.config` - Server configuration file

The test run completed in ~3.5 minutes, demonstrating successful setup.

## Advanced Topic - RNAseq Pipeline

### Data Preparation

For real analysis, we worked with RNAseq data located at:
```
medbioinfo2025/common_data/RNAseq
```

We created symbolic links to organize our data:

```bash
mkdir data
cd data
ln -s ../../common_data/RNAseq/*.fastq.gz .
cd ..
```

Project structure:
```
.
â”œâ”€â”€ data
â”‚   â”œâ”€â”€ SRR5223504_1.fastq.gz -> ../../common_data/RNAseq/SRR5223504_1.fastq.gz
â”‚   â”œâ”€â”€ SRR5223504_2.fastq.gz -> ../../common_data/RNAseq/SRR5223504_2.fastq.gz
â”‚   â”œâ”€â”€ SRR5223517_1.fastq.gz -> ../../common_data/RNAseq/SRR5223517_1.fastq.gz
â”‚   â””â”€â”€ ... (additional samples)
â”œâ”€â”€ pixi.lock
â””â”€â”€ pixi.toml
```

### nf-core Launch Configuration

We used the nf-core launcher to configure the RNAseq pipeline:

1. **Working and results directories** - Set absolute paths
2. **Input CSV file** - Created samplesheet according to pipeline requirements  
3. **Reference genome** - Used updated human genome references
4. **Resume option** - Enabled for fault tolerance

### Running the Full Pipeline

Two execution methods were available:

#### Direct execution:
```bash
pixi run nextflow run nf-core/rnaseq -r 3.19.0 -resume -params-file nf-params.json -c hpc2n.config
```

#### Batch submission:
```bash
#!/bin/bash -l
#SBATCH -A our_proj_allocation
#SBATCH -n 5
#SBATCH -t 24:00:00

/your_home_directory/.pixi/bin/pixi run nextflow run nf-core/rnaseq -r 3.19.0 -params-file /your_path/nf-params.json -c server.config
```

## Key Learnings

### Technical Skills
- **Pipeline evaluation** - How to assess nf-core pipelines for your data
- **Environment management** - Using pixi for reproducible setups
- **Configuration management** - Server-specific settings and parameter files
- **Job submission** - Both interactive and batch execution methods
- **Data organization** - Proper file linking and project structure

### nf-core Ecosystem Understanding
- **Community-driven development** - Volunteer-maintained pipelines
- **Standardization benefits** - Consistent documentation and structure
- **Quality control importance** - Understanding pipeline suitability for data
- **Reproducibility features** - Parameter files and configuration tracking

## Challenges and Solutions

### Challenge 1
**Problem**: Understanding which pipeline is suitable for my specific data type  
**Solution**: Systematic evaluation using nf-core documentation sections (Usage, Parameters, Output)

### Challenge 2  
**Problem**: Configuration file setup for server-specific requirements  
**Solution**: Download and customize HPC2N configuration template with appropriate resource limits

### Challenge 3
**Problem**: Managing complex parameter files for pipeline runs  
**Solution**: Use nf-core launcher to generate JSON parameter files automatically

## Insights and Connections

> "nf-core transforms bioinformatics from custom scripting to standardized, reproducible workflows"

- **Building on Day 3**: We moved from basic Nextflow concepts to production-ready pipelines
- **Real-world application**: Working with actual RNAseq data instead of toy examples  
- **Community aspect**: Understanding the collaborative nature of modern bioinformatics
- **Quality focus**: Emphasis on validation and understanding rather than black-box usage

## Comparison with Previous Days

- **Day 1**: Data management and FAIR principles â†’ Foundation for reproducible research
- **Day 2**: Environments and quality control â†’ Tools for reliable analysis
- **Day 3**: Nextflow and workflow management â†’ Core workflow technology
- **Day 4**: nf-core pipelines and RNAseq â†’ Production bioinformatics applications

## Questions for Further Exploration

1. How do I evaluate if a pipeline is actively maintained and suitable for my research?
2. What are best practices for customizing nf-core pipelines for specific research needs?
3. How can I contribute back to the nf-core community with improvements or new modules?

## Looking Ahead

Goals for Day 5:
- [ ] Analyze RNAseq pipeline output in detail
- [ ] Explore other nf-core pipelines relevant to my research
- [ ] Practice parameter optimization for real datasets

## Resources and References

- [nf-core homepage](https://nf-co.re/)
- [nf-core/rnaseq pipeline](https://nf-co.re/rnaseq/3.19.0/)
- [nf-core/sarek pipeline](https://nf-co.re/sarek/3.4.2/)
- [HPC2N configuration files](https://raw.githubusercontent.com/hpc2n/intro-course/master/exercises/NEXTFLOW/INTERACTIVE/hpc2n.config)
- [Course materials](https://amrei-bp.github.io/Applied_Bioinformatics_MedBioInfo_2025/)

---

*Day 4 complete! From simple workflows to production pipelines - the power of standardized bioinformatics is incredible.* ðŸ§¬ðŸš€