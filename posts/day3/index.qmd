---
title: "Day 3 of MedBioInfo"
date: 2025-10-08
categories: [medbioinfo, learning, data-science]
author: "August Lundholm"
description: "Day 3 of applied bioinformatics course"
draft: false
---

# Day 3 of MedBioInfo

## Today's Focus

Today we worked with Nextflow and workflow management.

![Nextflow Overview](nextflow_overview.png){width=80% fig-align="center"}

*Figure 1: Nextflow workflow management system overview. This diagram illustrates the core concepts of Nextflow including processes, channels, and how data flows through a computational pipeline.*

### Running Nextflow Hello World

Today we ran our first Nextflow script:

```nextflow
#!/usr/bin/env nextflow

params.greeting = 'Hello world!'
greeting_ch = Channel.of(params.greeting)

process SPLITLETTERS {
    input:
    val x

    output:
    path 'chunk_*'

    script:
    """
    printf '$x' | split -b 6 - chunk_
    """
}

process CONVERTTOUPPER {
    input:
    path y

    output:
    stdout

    script:
    """
    cat $y | tr '[a-z]' '[A-Z]' 
    """
}

workflow {
    letters_ch = SPLITLETTERS(greeting_ch)
    results_ch = CONVERTTOUPPER(letters_ch.flatten())
    results_ch.view{ it }
}
```

When we run this script:

```bash
nextflow run hello.nf
```

We get this output:

```
N E X T F L O W   ~  version 25.04.7

Launching `hello.nf` [jolly_faraday] DSL2 - revision: f5e335f983

executor >  local (3)
[96/fd5f07] SPLITLETTERS (1)   [100%] 1 of 1 ✔
[7e/dad424] CONVERTTOUPPER (2) [100%] 2 of 2 ✔
HELLO 
WORLD!
```


### Customizing Parameters

Nextflow has the ability to override parameters from the command line. We can for example change the greeting message with:

```bash
pixi run nextflow run hello.nf -resume --greeting 'Bonjour le monde!'
```

### Nextflow RNA-seq pipeline

We also worked with building our own nextflow pipelines for quality control of rna-seq data. The training included running FastQC and MultiQC on sample data:

![Channel Process FastQC](channel-process_fqc.png){width=80% fig-align="center"}

*Figure 2: Nextflow channel and process architecture for FastQC quality control. This diagram shows how input data flows through channels into FastQC processes. Each process can run independently while channels manage data flow between steps.*

#### Quality Control Reports

- [FastQC Report - Sample 1](gut_1_fastqc.html) - Individual quality control report for gut sample 1
- [FastQC Report - Sample 2](gut_2_fastqc.html) - Individual quality control report for gut sample 2  
- [MultiQC Report](multiqc_report.html) - Comprehensive report combining all QC metrics


---

End of Day 3!