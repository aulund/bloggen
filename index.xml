<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>August´s mbi-blog</title>
<link>https://aulund.github.io/bloggen/</link>
<atom:link href="https://aulund.github.io/bloggen/index.xml" rel="self" type="application/rss+xml"/>
<description>A blog built with Quarto</description>
<generator>quarto-1.8.25</generator>
<lastBuildDate>Thu, 09 Oct 2025 22:00:00 GMT</lastBuildDate>
<item>
  <title>Post With Code</title>
  <dc:creator>Harlow Malloc</dc:creator>
  <link>https://aulund.github.io/bloggen/posts/post-with-code/</link>
  <description><![CDATA[ 





<p>This is a post with executable code.</p>


<!-- -->


 ]]></description>
  <category>news</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://aulund.github.io/bloggen/posts/post-with-code/</guid>
  <pubDate>Thu, 09 Oct 2025 22:00:00 GMT</pubDate>
  <media:content url="https://aulund.github.io/bloggen/posts/post-with-code/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>Tristan O&#39;Malley</dc:creator>
  <link>https://aulund.github.io/bloggen/posts/welcome/</link>
  <description><![CDATA[ 





<p>This is the first post in a Quarto blog. Welcome!</p>
<p><img src="https://aulund.github.io/bloggen/posts/welcome/thumbnail.jpg" class="img-fluid"></p>
<p>Since this post doesn’t specify an explicit <code>image</code>, the first image in the post will be used in the listing page of posts.</p>


<!-- -->


 ]]></description>
  <category>news</category>
  <guid>https://aulund.github.io/bloggen/posts/welcome/</guid>
  <pubDate>Mon, 06 Oct 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Day 4 of MedBioInfo</title>
  <dc:creator>August Lundholm</dc:creator>
  <link>https://aulund.github.io/bloggen/posts/day4/</link>
  <description><![CDATA[ 





<section id="day-4-of-medbioinfo" class="level1">
<h1>Day 4 of MedBioInfo</h1>
<p>Day 4 brought us deeper into the nf-core ecosystem! Today we moved from basic Nextflow to advanced pipeline usage with real biological data.</p>
<section id="todays-focus" class="level2">
<h2 class="anchored" data-anchor-id="todays-focus">Today’s Focus</h2>
<p>Today we worked with: - nf-core pipeline introduction and evaluation - Testing pipelines with built-in test data<br>
- Running the nf-core/rnaseq pipeline on real data - Understanding pipeline configuration and job submission</p>
</section>
<section id="morning-session---nf-core-introduction" class="level2">
<h2 class="anchored" data-anchor-id="morning-session---nf-core-introduction">Morning Session - nf-core Introduction</h2>
<section id="what-makes-nf-core-special" class="level3">
<h3 class="anchored" data-anchor-id="what-makes-nf-core-special">What makes nf-core special?</h3>
<p>The nf-core community provides: - <strong>Standardized pipelines</strong> for many bioinformatics workflows - <strong>Extensive documentation</strong> following consistent guidelines - <strong>Automatic input validation</strong> through the nf-core launcher - <strong>Consistent structure</strong> across all pipelines - <strong>Open source development</strong> by volunteer community</p>
</section>
<section id="finding-and-evaluating-pipelines" class="level3">
<h3 class="anchored" data-anchor-id="finding-and-evaluating-pipelines">Finding and Evaluating Pipelines</h3>
<p>We explored the <a href="https://nf-co.re/">nf-core homepage</a> and learned to evaluate pipelines by checking: - <strong>Usage documentation</strong> - understanding input requirements - <strong>Parameters</strong> - available customization options<br>
- <strong>Output</strong> - expected results and file formats - <strong>Pipeline suitability</strong> for our specific data types</p>
</section>
</section>
<section id="afternoon-session---hands-on-pipeline-testing" class="level2">
<h2 class="anchored" data-anchor-id="afternoon-session---hands-on-pipeline-testing">Afternoon Session - Hands-on Pipeline Testing</h2>
<section id="setting-up-the-environment" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-the-environment">Setting Up the Environment</h3>
<p>First, we created a dedicated pixi environment for nf-core work:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> init nextflow_test <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> conda-forge <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> bioconda</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> nextflow_test</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> add nextflow nf-core</span></code></pre></div></div>
</section>
<section id="testing-the-setup" class="level3">
<h3 class="anchored" data-anchor-id="testing-the-setup">Testing the Setup</h3>
<p>We verified our installation worked correctly:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run nextflow <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-version</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run nf-core <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--help</span></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run nextflow run hello</span></code></pre></div></div>
<p>Expected output:</p>
<pre><code>N E X T F L O W
version 25.04.7 build 5955
created 08-09-2025 13:29 UTC (15:29 CEST)
cite doi:10.1038/nbt.3820
http://nextflow.io</code></pre>
</section>
<section id="configuration-profile-setup" class="level3">
<h3 class="anchored" data-anchor-id="configuration-profile-setup">Configuration Profile Setup</h3>
<p>We downloaded the HPC2N configuration file for server-specific settings:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://raw.githubusercontent.com/hpc2n/intro-course/master/exercises/NEXTFLOW/INTERACTIVE/hpc2n.config</span></code></pre></div></div>
<p>Key configuration parameters: - <code>max_memory = 128.GB</code> - <code>max_cpus = 28</code> - <code>max_time = 168.h</code> - <code>executor = 'slurm'</code></p>
</section>
<section id="running-test-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="running-test-pipeline">Running Test Pipeline</h3>
<p>We tested the Sarek variant calling pipeline with built-in test data:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run nextflow run nf-core/sarek <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-profile</span> test <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--outdir</span> sarek_test <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> hpc2n.config</span></code></pre></div></div>
<p>Command breakdown: - <code>pixi run</code> - Use our pixi environment - <code>nextflow run</code> - Execute with Nextflow - <code>nf-core/sarek</code> - Pipeline name/location - <code>-profile test</code> - Use built-in test data - <code>--outdir sarek_test</code> - Output directory - <code>-c hpc2n.config</code> - Server configuration file</p>
<p>The test run completed in ~3.5 minutes, demonstrating successful setup.</p>
</section>
</section>
<section id="advanced-topic---rnaseq-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="advanced-topic---rnaseq-pipeline">Advanced Topic - RNAseq Pipeline</h2>
<section id="data-preparation" class="level3">
<h3 class="anchored" data-anchor-id="data-preparation">Data Preparation</h3>
<p>For real analysis, we worked with RNAseq data located at:</p>
<pre><code>medbioinfo2025/common_data/RNAseq</code></pre>
<p>We created symbolic links to organize our data:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> data</span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> data</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ln</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> ../../common_data/RNAseq/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.fastq.gz .</span>
<span id="cb7-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ..</span></code></pre></div></div>
<p>Project structure:</p>
<pre><code>.
├── data
│   ├── SRR5223504_1.fastq.gz -&gt; ../../common_data/RNAseq/SRR5223504_1.fastq.gz
│   ├── SRR5223504_2.fastq.gz -&gt; ../../common_data/RNAseq/SRR5223504_2.fastq.gz
│   ├── SRR5223517_1.fastq.gz -&gt; ../../common_data/RNAseq/SRR5223517_1.fastq.gz
│   └── ... (additional samples)
├── pixi.lock
└── pixi.toml</code></pre>
</section>
<section id="nf-core-launch-configuration" class="level3">
<h3 class="anchored" data-anchor-id="nf-core-launch-configuration">nf-core Launch Configuration</h3>
<p>We used the nf-core launcher to configure the RNAseq pipeline:</p>
<ol type="1">
<li><strong>Working and results directories</strong> - Set absolute paths</li>
<li><strong>Input CSV file</strong> - Created samplesheet according to pipeline requirements<br>
</li>
<li><strong>Reference genome</strong> - Used updated human genome references</li>
<li><strong>Resume option</strong> - Enabled for fault tolerance</li>
</ol>
</section>
<section id="running-the-full-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="running-the-full-pipeline">Running the Full Pipeline</h3>
<p>Two execution methods were available:</p>
<section id="direct-execution" class="level4">
<h4 class="anchored" data-anchor-id="direct-execution">Direct execution:</h4>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run nextflow run nf-core/rnaseq <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> 3.19.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-resume</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-params-file</span> nf-params.json <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> hpc2n.config</span></code></pre></div></div>
</section>
<section id="batch-submission" class="level4">
<h4 class="anchored" data-anchor-id="batch-submission">Batch submission:</h4>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash -l</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#SBATCH -A our_proj_allocation</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#SBATCH -n 5</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#SBATCH -t 24:00:00</span></span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/your_home_directory/.pixi/bin/pixi</span> run nextflow run nf-core/rnaseq <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> 3.19.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-params-file</span> /your_path/nf-params.json <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> server.config</span></code></pre></div></div>
</section>
</section>
</section>
<section id="key-learnings" class="level2">
<h2 class="anchored" data-anchor-id="key-learnings">Key Learnings</h2>
<section id="technical-skills" class="level3">
<h3 class="anchored" data-anchor-id="technical-skills">Technical Skills</h3>
<ul>
<li><strong>Pipeline evaluation</strong> - How to assess nf-core pipelines for your data</li>
<li><strong>Environment management</strong> - Using pixi for reproducible setups</li>
<li><strong>Configuration management</strong> - Server-specific settings and parameter files</li>
<li><strong>Job submission</strong> - Both interactive and batch execution methods</li>
<li><strong>Data organization</strong> - Proper file linking and project structure</li>
</ul>
</section>
<section id="nf-core-ecosystem-understanding" class="level3">
<h3 class="anchored" data-anchor-id="nf-core-ecosystem-understanding">nf-core Ecosystem Understanding</h3>
<ul>
<li><strong>Community-driven development</strong> - Volunteer-maintained pipelines</li>
<li><strong>Standardization benefits</strong> - Consistent documentation and structure</li>
<li><strong>Quality control importance</strong> - Understanding pipeline suitability for data</li>
<li><strong>Reproducibility features</strong> - Parameter files and configuration tracking</li>
</ul>
</section>
</section>
<section id="challenges-and-solutions" class="level2">
<h2 class="anchored" data-anchor-id="challenges-and-solutions">Challenges and Solutions</h2>
<section id="challenge-1" class="level3">
<h3 class="anchored" data-anchor-id="challenge-1">Challenge 1</h3>
<p><strong>Problem</strong>: Understanding which pipeline is suitable for my specific data type<br>
<strong>Solution</strong>: Systematic evaluation using nf-core documentation sections (Usage, Parameters, Output)</p>
</section>
<section id="challenge-2" class="level3">
<h3 class="anchored" data-anchor-id="challenge-2">Challenge 2</h3>
<p><strong>Problem</strong>: Configuration file setup for server-specific requirements<br>
<strong>Solution</strong>: Download and customize HPC2N configuration template with appropriate resource limits</p>
</section>
<section id="challenge-3" class="level3">
<h3 class="anchored" data-anchor-id="challenge-3">Challenge 3</h3>
<p><strong>Problem</strong>: Managing complex parameter files for pipeline runs<br>
<strong>Solution</strong>: Use nf-core launcher to generate JSON parameter files automatically</p>
</section>
</section>
<section id="insights-and-connections" class="level2">
<h2 class="anchored" data-anchor-id="insights-and-connections">Insights and Connections</h2>
<blockquote class="blockquote">
<p>“nf-core transforms bioinformatics from custom scripting to standardized, reproducible workflows”</p>
</blockquote>
<ul>
<li><strong>Building on Day 3</strong>: We moved from basic Nextflow concepts to production-ready pipelines</li>
<li><strong>Real-world application</strong>: Working with actual RNAseq data instead of toy examples<br>
</li>
<li><strong>Community aspect</strong>: Understanding the collaborative nature of modern bioinformatics</li>
<li><strong>Quality focus</strong>: Emphasis on validation and understanding rather than black-box usage</li>
</ul>
</section>
<section id="comparison-with-previous-days" class="level2">
<h2 class="anchored" data-anchor-id="comparison-with-previous-days">Comparison with Previous Days</h2>
<ul>
<li><strong>Day 1</strong>: Data management and FAIR principles → Foundation for reproducible research</li>
<li><strong>Day 2</strong>: Environments and quality control → Tools for reliable analysis</li>
<li><strong>Day 3</strong>: Nextflow and workflow management → Core workflow technology</li>
<li><strong>Day 4</strong>: nf-core pipelines and RNAseq → Production bioinformatics applications</li>
</ul>
</section>
<section id="questions-for-further-exploration" class="level2">
<h2 class="anchored" data-anchor-id="questions-for-further-exploration">Questions for Further Exploration</h2>
<ol type="1">
<li>How do I evaluate if a pipeline is actively maintained and suitable for my research?</li>
<li>What are best practices for customizing nf-core pipelines for specific research needs?</li>
<li>How can I contribute back to the nf-core community with improvements or new modules?</li>
</ol>
</section>
<section id="looking-ahead" class="level2">
<h2 class="anchored" data-anchor-id="looking-ahead">Looking Ahead</h2>
<p>Goals for Day 5: - [ ] Analyze RNAseq pipeline output in detail - [ ] Explore other nf-core pipelines relevant to my research - [ ] Practice parameter optimization for real datasets</p>
</section>
<section id="resources-and-references" class="level2">
<h2 class="anchored" data-anchor-id="resources-and-references">Resources and References</h2>
<ul>
<li><a href="https://nf-co.re/">nf-core homepage</a></li>
<li><a href="https://nf-co.re/rnaseq/3.19.0/">nf-core/rnaseq pipeline</a></li>
<li><a href="https://nf-co.re/sarek/3.4.2/">nf-core/sarek pipeline</a></li>
<li><a href="https://raw.githubusercontent.com/hpc2n/intro-course/master/exercises/NEXTFLOW/INTERACTIVE/hpc2n.config">HPC2N configuration files</a></li>
<li><a href="https://amrei-bp.github.io/Applied_Bioinformatics_MedBioInfo_2025/">Course materials</a></li>
</ul>
<hr>
<p><em>Day 4 complete! From simple workflows to production pipelines - the power of standardized bioinformatics is incredible.</em> 🧬🚀</p>


<!-- -->

</section>
</section>

 ]]></description>
  <category>medbioinfo</category>
  <category>learning</category>
  <category>data-science</category>
  <category>nf-core</category>
  <guid>https://aulund.github.io/bloggen/posts/day4/</guid>
  <pubDate>Sun, 27 Oct 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Day 3 of MedBioInfo</title>
  <dc:creator>August Lundholm</dc:creator>
  <link>https://aulund.github.io/bloggen/posts/day3/</link>
  <description><![CDATA[ 





<section id="day-3-of-medbioinfo" class="level1">
<h1>Day 3 of MedBioInfo</h1>
<p>Welcome to Day 3! Here are my reflections and key takeaways from today’s sessions.</p>
<section id="todays-focus" class="level2">
<h2 class="anchored" data-anchor-id="todays-focus">Today’s Focus</h2>
<p>Today we worked with Nextflow and workflow management.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aulund.github.io/bloggen/posts/day3/nextflow_overview.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption>Nextflow Overview</figcaption>
</figure>
</div>
<p><em>Figure 1: Nextflow workflow management system overview. This diagram illustrates the core concepts of Nextflow including processes, channels, and how data flows through a computational pipeline. Nextflow enables scalable and portable bioinformatics workflows.</em></p>
<section id="running-nextflow-hello-world" class="level3">
<h3 class="anchored" data-anchor-id="running-nextflow-hello-world">Running Nextflow Hello World</h3>
<p>Today we ran our first Nextflow script! Here’s the complete <code>hello.nf</code> script:</p>
<pre class="nextflow"><code>#!/usr/bin/env nextflow

params.greeting = 'Hello world!'
greeting_ch = Channel.of(params.greeting)

process SPLITLETTERS {
    input:
    val x

    output:
    path 'chunk_*'

    script:
    """
    printf '$x' | split -b 6 - chunk_
    """
}

process CONVERTTOUPPER {
    input:
    path y

    output:
    stdout

    script:
    """
    cat $y | tr '[a-z]' '[A-Z]' 
    """
}

workflow {
    letters_ch = SPLITLETTERS(greeting_ch)
    results_ch = CONVERTTOUPPER(letters_ch.flatten())
    results_ch.view{ it }
}</code></pre>
<p>When we run this script:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nextflow</span> run hello.nf</span></code></pre></div></div>
<p>We get this output:</p>
<pre><code>N E X T F L O W   ~  version 25.04.7

Launching `hello.nf` [jolly_faraday] DSL2 - revision: f5e335f983

executor &gt;  local (3)
[96/fd5f07] SPLITLETTERS (1)   [100%] 1 of 1 ✔
[7e/dad424] CONVERTTOUPPER (2) [100%] 2 of 2 ✔
HELLO 
WORLD!</code></pre>
<p>This workflow demonstrates several key Nextflow concepts: - <strong>Channels</strong>: <code>greeting_ch</code> carries data between processes - <strong>SPLITLETTERS process</strong>: Uses <code>split</code> command to break text into 6-byte chunks - <strong>CONVERTTOUPPER process</strong>: Converts text to uppercase using <code>tr</code> command - <strong>Workflow</strong>: Connects processes with <code>.flatten()</code> to handle multiple outputs - <strong>Output</strong>: Uses <code>.view{ it }</code> to display results</p>
</section>
<section id="customizing-parameters" class="level3">
<h3 class="anchored" data-anchor-id="customizing-parameters">Customizing Parameters</h3>
<p>One of the features of Nextflow is the ability to override parameters from the command line. We can change the greeting message without modifying the script:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run nextflow run hello.nf <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-resume</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--greeting</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bonjour le monde!'</span></span></code></pre></div></div>
</section>
<section id="nextflow-rna-seq-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="nextflow-rna-seq-pipeline">Nextflow RNA-seq pipeline</h3>
<p>We also worked with building our own nextflow pipelines for quality control of rna-seq data. The training included running FastQC and MultiQC on sample data:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://aulund.github.io/bloggen/posts/day3/channel-process_fqc.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption>Channel Process FastQC</figcaption>
</figure>
</div>
<p><em>Figure 2: Nextflow channel and process architecture for FastQC quality control. This diagram shows how input data flows through channels into FastQC processes. Each process can run independently while channels manage data flow between steps.</em></p>
<section id="quality-control-reports" class="level4">
<h4 class="anchored" data-anchor-id="quality-control-reports">Quality Control Reports</h4>
<ul>
<li><a href="gut_1_fastqc.html">FastQC Report - Sample 1</a> - Individual quality control report for gut sample 1</li>
<li><a href="gut_2_fastqc.html">FastQC Report - Sample 2</a> - Individual quality control report for gut sample 2<br>
</li>
<li><a href="multiqc_report.html">MultiQC Report</a> - Comprehensive report combining all QC metrics</li>
</ul>
<p>These reports demonstrate: - <strong>FastQC analysis</strong>: Per-base quality scores, sequence composition, adapter contamination - <strong>MultiQC aggregation</strong>: Combined visualization of multiple samples</p>
<hr>
<p>End of Day 3!</p>


<!-- -->

</section>
</section>
</section>
</section>

 ]]></description>
  <category>medbioinfo</category>
  <category>learning</category>
  <category>data-science</category>
  <guid>https://aulund.github.io/bloggen/posts/day3/</guid>
  <pubDate>Sun, 27 Oct 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Day 2 of applied bioinformatics</title>
  <dc:creator>August Lundholm</dc:creator>
  <link>https://aulund.github.io/bloggen/posts/day2/</link>
  <description><![CDATA[ 





<section id="day-2-of-medbioinfo" class="level1">
<h1>Day 2 of MedBioInfo</h1>
<p>Welcome back to my learning journey! Here are my reflections and key takeaways from day 2.</p>
<section id="todays-focus" class="level2">
<h2 class="anchored" data-anchor-id="todays-focus">Today’s Focus</h2>
<p>Today we covered four main topics: - Introduction to environments - Quality control with Pixi and Slurm - Introduction to containers<br>
- Quality control with containers</p>
</section>
<section id="introduction-to-environments" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-environments">Introduction to Environments</h2>
<p>Since I work with variant visualisations, large datasets, and a mix of custom scripts and publication-ready figures it’s crucial that my toolchain is consistent and reproducible across systems and collaborators. Using Pixi (or another environment manager) keeps everything isolated and version-controlled, so I don’t end up with “it works on my computer” issues. Having a dedicated environment for each project makes it easier to share my setup — others can just clone the repository and get the exact same tools and versions. It also prevents older pipelines or scripts from breaking when dependencies update. When I prepare figures or analyses for papers, Pixi can help me keep track of software versions, channels, and dependencies — which makes the “Methods” section reproducible. Pixi supports multiple platforms and I can test everything locally and then run it on the cluster with minimal risk of environment mismatch.</p>
</section>
<section id="quality-control-with-pixi-and-slurm" class="level2">
<h2 class="anchored" data-anchor-id="quality-control-with-pixi-and-slurm">Quality Control with Pixi and Slurm</h2>
<p>Quality control isn’t the most exciting part of bioinformatics, but it’s one of the most important. If the sequencing data is bad, everything that comes after will be unreliable. Running FastQC and MultiQC early on saves time later, even if the results themselves are pretty basic. It also makes me think more about how I organize things. Having a clear directory structure and running everything inside a controlled environment like Pixi helps keep track of what was actually done. It’s easy to lose that overview once the project grows. Working with SLURM and screen is a bit clunky at first, but it’s useful to understand how jobs run on the cluster. Being able to rerun things reproducibly — same data, same tools, same parameters — is really the main point.</p>
</section>
<section id="introduction-to-containers" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-containers">Introduction to Containers</h2>
<p>Reproducibility is a constant problem in bioinformatics, and containers make it more manageable. They keep analyses stable even when systems or dependencies change. It’s also a practical way to share workflows without needing to explain every installation step. Building containers from scratch feels a bit advanced, but understanding how they work makes the overall workflow more reliable.</p>
<hr>
<p>*That’s all for today</p>


<!-- -->

</section>
</section>

 ]]></description>
  <category>medbioinfo</category>
  <category>learning</category>
  <category>data-science</category>
  <guid>https://aulund.github.io/bloggen/posts/day2/</guid>
  <pubDate>Sat, 26 Oct 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Day 1</title>
  <dc:creator>August Lundholm</dc:creator>
  <link>https://aulund.github.io/bloggen/posts/day1/</link>
  <description><![CDATA[ 





<section id="day-1-of-medbioinfo" class="level1">
<h1>Day 1 of medbioinfo</h1>
<p>This is my first blog post! Here are my reflections and notes from day 1.</p>
<section id="what-i-learned-today" class="level2">
<h2 class="anchored" data-anchor-id="what-i-learned-today">What I Learned Today</h2>
<ul>
<li>We talked about good practice in storing and processing data</li>
<li>How to set up a Quarto blog</li>
<li>The importance of YAML frontmatter</li>
<li>How to write content in Markdown</li>
</ul>
</section>
<section id="data-management-and-reproducible-research" class="level2">
<h2 class="anchored" data-anchor-id="data-management-and-reproducible-research">Data management and reproducible research</h2>
<ul>
<li>We discussed the data lifecycle and what different stages the data goes through. from planning for what data to be collected to eventually being reused. The data lifecycle can be long and involve multiple people and thats why its important to work according to FAIR-principles.</li>
<li>FAIR - Findable Accesible Interoperable and Reusable. Working according to this concept ensure that data collected for one question can be used for many more.
<ul>
<li>This relies on good data management practices where you work by research documentation, data organisation, information security, ethics and legislation.</li>
</ul></li>
<li>Data is often not complete after first collection, first processing or first analysis. things are being added or moved between project altered as the work goes along. which makes it important to store data in a good system in a separate folder of raw-data which you dont touch.
<ul>
<li>some tips for good practice with documenting your data:
<ul>
<li>Document your methods and workflows.</li>
<li>Document where and when you downloaded data.</li>
<li>Document the versions of the software that you ran.</li>
</ul></li>
</ul></li>
<li>Other things that we will practice later in the course is:
<ul>
<li>Employing version control via GIT</li>
<li>Shareable environments to make your scripts reproducible.</li>
<li>containers to run scripts on other operating systems</li>
<li>workflow managers, that keep track of all of the above and also parse your data through the different scripts.</li>
</ul></li>
</ul>
</section>
<section id="quarto-blog" class="level2">
<h2 class="anchored" data-anchor-id="quarto-blog">Quarto blog</h2>
<ul>
<li><p>We also learned to set up this blog!</p></li>
<li><p>Quarto allows you to write text and code into the same document and render into a few different formats such as webpages, blogs (!), docx and pdf.</p></li>
</ul>
</section>
<section id="here-are-some-samples-of-code" class="level2">
<h2 class="anchored" data-anchor-id="here-are-some-samples-of-code">Here are some samples of code</h2>
<ul>
<li>here is a python example:</li>
</ul>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A simple Python example</span></span>
<span id="cb1-2">greeting <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(greeting)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, world!</code></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Some basic math</span></span>
<span id="cb3-2">numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb3-3">total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(numbers)</span>
<span id="cb3-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The sum is: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>The sum is: 15</code></pre>
</div>
</div>
<ul>
<li>and this is a R example!</li>
</ul>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(mtcars)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(mtcars)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1</code></pre>
</div>
</div>
<p>That’s all for today!</p>


<!-- -->

</section>
</section>

 ]]></description>
  <category>blog</category>
  <guid>https://aulund.github.io/bloggen/posts/day1/</guid>
  <pubDate>Sun, 09 Jun 2024 22:00:00 GMT</pubDate>
  <media:content url="https://aulund.github.io/bloggen/posts/day1/Data_life_cycle.png" medium="image" type="image/png" height="143" width="144"/>
</item>
</channel>
</rss>
